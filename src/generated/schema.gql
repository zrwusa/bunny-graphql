# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserSetting {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    userId: String!
    receiveNotifications: Boolean!
    receiveEmails: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    user: User!
    title: String!
    content: String!
    price: Float
    image: String
}

type Inventory {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    productId: String!

    """Stock Quantity Description"""
    stockQuantity: Int!
}

type Product {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    inventory: Inventory
    brand: String
    name: String!
    price: Float
    description: String
}

type OrderProducts {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    order: Order!
    product: Product!
    quantity: Int!
    price: Float!
}

type Order {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    user: User!
    products: [OrderProducts!]
    status: OrderStatus!
    paymentStatus: PaymentStatus!
    shippingStatus: ShippingStatus!
    paymentMethod: PaymentMethod!
    totalAmount: Float!
}

enum OrderStatus {
    Pending
    Paid
    AwaitingShipment
    Shipped
    Completed
    Cancelled
    Refunding
    Refunded
    Returning
    Returned
}

enum PaymentStatus {
    Pending
    Paid
    Failed
    Refunded
}

enum ShippingStatus {
    Pending
    Shipped
    Delivered
}

enum PaymentMethod {
    CreditCard
    PayPal
    BankTransfer
    Other
}

type User {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    settings: UserSetting
    posts: [Post!]!
    orders: [Order!]!
    username: String!
    email: String!
    password: String
    oauthId: String
    provider: String
}

type Payment {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    order: Order!
    status: PaymentStatus!
    paymentMethod: PaymentMethod!
    amount: Float!
    paymentTime: DateTime
}

type App {
    message: String!
}

type Query {
    ping: App!
    user(id: String!): User
    users: [User!]!
    product(id: String!): Product
    products: [Product!]!
    inventory(id: Int!): Inventory!
    posts: [Post!]!
    orders(filterOrderInput: FilterOrderInput!): [Order!]!
    payment(id: Int!): Payment!
}

input FilterOrderInput {
    page: Float! = 1
    pageSize: Float! = 10
    status: String
    startDate: DateTime
    endDate: DateTime
}

type Mutation {
    createUser(createUserInput: CreateUserInput!): User!
    createUserSettings(createUserSettingsInput: CreateUserSettingsInput!): UserSetting!
    createProduct(createProductInput: CreateProductInput!): Product!
    removeInventory(id: Int!): Inventory!
    createPost(createPostInput: CreatePostInput!): Post!
    createPayment(createPaymentInput: CreatePaymentInput!): Payment!
    updatePayment(updatePaymentInput: UpdatePaymentInput!): Payment!
    removePayment(id: Int!): Payment!
}

input CreateUserInput {
    username: String!
    email: String!
    password: String!
}

input CreateUserSettingsInput {
    userId: String!
    receiveNotifications: Boolean = false
    receiveEmails: Boolean = false
}

input CreateProductInput {
    name: String!
    brand: String!
    price: Float!
    description: String
}

input CreatePostInput {
    userId: String!
    title: String!
    content: String!
    price: Float
    image: String
}

input CreatePaymentInput {
    """Example field (placeholder)"""
    exampleField: Int!
}

input UpdatePaymentInput {
    """Example field (placeholder)"""
    exampleField: Int
    id: Int!
}